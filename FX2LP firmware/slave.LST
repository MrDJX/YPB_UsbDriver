C51 COMPILER V9.59.0.0   SLAVE                                                             12/17/2019 08:47:49 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE SLAVE
OBJECT MODULE PLACED IN slave.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE slave.c OPTIMIZE(6,SPEED) DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #pragma NOIV                    // Do not generate interrupt vectors
   2          //-----------------------------------------------------------------------------
   3          //   File:      slave.c
   4          //   Contents:  Hooks required to implement USB peripheral function.
   5          //              Code written for FX2 REVE 56-pin and above.
   6          //              This firmware is used to demonstrate FX2 Slave FIF
   7          //              operation.
   8          //   Copyright (c) 2003 Cypress Semiconductor All rights reserved
   9          //-----------------------------------------------------------------------------
  10          #include "fx2.h"
  11          #include "fx2regs.h"
  12          #include "fx2sdly.h"            // SYNCDELAY macro
  13          
  14          
  15          extern BOOL GotSUD;             // Received setup data flag
  16          extern BOOL Sleep;
  17          extern BOOL Rwuen;
  18          extern BOOL Selfpwr;
  19          
  20          BYTE Configuration;             // Current configuration
  21          BYTE AlternateSetting;          // Alternate settings
  22          BOOL done_frm_fpga = 0;
  23          
  24          // EZUSB FX2 PORTA = slave fifo enable(s), when IFCFG[1:0]=11
  25          //sbit PA0 = IOA ^ 0;             // alt. func., INT0#
  26          //sbit PA1 = IOA ^ 1;             // alt. func., INT1#
  27          // sbit PA2 = IOA ^ 2;          // is SLOE
  28          //sbit PA3 = IOA ^ 3;             // alt. func., WU2
  29          // sbit PA4 = IOA ^ 4;          // is FIFOADR0
  30          // sbit PA5 = IOA ^ 5;          // is FIFOADR1
  31          // sbit PA6 = IOA ^ 6;          // is PKTEND
  32          // sbit PA7 = IOA ^ 7;          // is FLAGD
  33          
  34          // EZUSB FX2 PORTC i/o...       port NA for 56-pin FX2
  35          // sbit PC0 = IOC ^ 0;
  36          // sbit PC1 = IOC ^ 1;
  37          // sbit PC2 = IOC ^ 2;
  38          // sbit PC3 = IOC ^ 3;
  39          // sbit PC4 = IOC ^ 4;
  40          // sbit PC5 = IOC ^ 5;
  41          // sbit PC6 = IOC ^ 6;
  42          // sbit PC7 = IOC ^ 7;
  43          
  44          // EZUSB FX2 PORTB = FD[7:0], when IFCFG[1:0]=11
  45          // sbit PB0 = IOB ^ 0;
  46          // sbit PB1 = IOB ^ 1;
  47          // sbit PB2 = IOB ^ 2;
  48          // sbit PB3 = IOB ^ 3;
  49          // sbit PB4 = IOB ^ 4;
  50          // sbit PB5 = IOB ^ 5;
  51          // sbit PB6 = IOB ^ 6;
  52          // sbit PB7 = IOB ^ 7;
  53          
  54          // EZUSB FX2 PORTD = FD[15:8], when IFCFG[1:0]=11 and WORDWIDE=1
  55          //sbit PD0 = IOD ^ 0;
C51 COMPILER V9.59.0.0   SLAVE                                                             12/17/2019 08:47:49 PAGE 2   

  56          //sbit PD1 = IOD ^ 1;
  57          //sbit PD2 = IOD ^ 2;
  58          //sbit PD3 = IOD ^ 3;
  59          //sbit PD4 = IOD ^ 4;
  60          //sbit PD5 = IOD ^ 5;
  61          //sbit PD6 = IOD ^ 6;
  62          //sbit PD7 = IOD ^ 7;
  63          
  64          // EZUSB FX2 PORTE is not bit-addressable...
  65          
  66          //-----------------------------------------------------------------------------
  67          // Task Dispatcher hooks
  68          // The following hooks are called by the task dispatcher.
  69          //-----------------------------------------------------------------------------
  70          //void LED_Off (BYTE LED_Mask);
  71          //void LED_On (BYTE LED_Mask);
  72          
  73          //-----------------------------------------------------------------------------
  74          // Task Dispatcher hooks
  75          //   The following hooks are called by the task dispatcher.
  76          //-----------------------------------------------------------------------------
  77          void TD_Init( void )
  78          { // Called once at startup
  79   1      
  80   1        //设置8051的工作频率为48MHz
  81   1        CPUCS = 0x12; // CLKSPD[1:0]=10, for 48MHz operation, output CLKOUT
  82   1      
  83   1        //配置FIFO标志输出，FLAG B配置为EP2 OUT FIFO空标志,，FLAG A配置为EP4 OUT FIFO空标志,
  84   1        PINFLAGSAB = 0x89;      // FLAGB - EP2EF   // FLAGA - EP4EF
  85   1        SYNCDELAY;
  86   1      
  87   1        //配置FIFO标志输出，FLAG C配置为EP6 IN FIFO满标志,FLAG D配置为EP8 IN FIFO满标志
  88   1        PINFLAGSCD = 0xFE;      // FLAGC - EP6FF  // FLAGD - EP6FF
  89   1        SYNCDELAY;
  90   1      
  91   1         //配置FIFO标志输出，FLAG G配置为EP2 OUT FIFO空标志
  92   1        PORTACFG |= 0x80;
  93   1      
  94   1        SYNCDELAY;
  95   1      //Slave使用内部48MHz的时钟
  96   1        IFCONFIG = 0xE3; //Internal clock, 48 MHz, Slave FIFO interface
  97   1        SYNCDELAY;
  98   1        
  99   1        EP1OUTCFG = 0xA0;
 100   1        EP1INCFG = 0xA0;
 101   1        
 102   1        SYNCDELAY;                    // see TRM section 15.14
 103   1        EP2CFG = 0xA2;
 104   1        SYNCDELAY;                    
 105   1        EP4CFG = 0xA0;
 106   1        SYNCDELAY;                    
 107   1        EP6CFG = 0xE2;
 108   1      
 109   1        SYNCDELAY;                    
 110   1       
 111   1        EP8CFG = 0xE0;
 112   1        //复位FIFO
 113   1        SYNCDELAY;
 114   1        FIFORESET = 0x80;             // activate NAK-ALL to avoid race conditions
 115   1        SYNCDELAY;                    // see TRM section 15.14
 116   1        FIFORESET = 0x02;             // reset, FIFO 2
 117   1        SYNCDELAY;                    // 
C51 COMPILER V9.59.0.0   SLAVE                                                             12/17/2019 08:47:49 PAGE 3   

 118   1        FIFORESET = 0x04;             // reset, FIFO 4
 119   1        SYNCDELAY;                    // 
 120   1        FIFORESET = 0x06;             // reset, FIFO 6
 121   1        SYNCDELAY;                    // 
 122   1        FIFORESET = 0x08;             // reset, FIFO 8
 123   1        SYNCDELAY;                    // 
 124   1        FIFORESET = 0x00;             // deactivate NAK-ALL
 125   1      
 126   1      
 127   1        // handle the case where we were already in AUTO mode...
 128   1        // ...for example: back to back firmware downloads...
 129   1        SYNCDELAY;                    // 
 130   1        EP2FIFOCFG = 0x00;            // AUTOOUT=0, WORDWIDE=1
 131   1        
 132   1        // core needs to see AUTOOUT=0 to AUTOOUT=1 switch to arm endp's
 133   1        
 134   1        SYNCDELAY;                    // 
 135   1        EP2FIFOCFG = 0x11;            // AUTOOUT=1, WORDWIDE=1
 136   1        
 137   1        SYNCDELAY;                    // 
 138   1        EP6FIFOCFG = 0x0D;            // AUTOIN=1, ZEROLENIN=1, WORDWIDE=1
 139   1        
 140   1        SYNCDELAY;                    // 
 141   1        EP4FIFOCFG = 0x11;            // AUTOOUT=1, WORDWIDE=1
 142   1        
 143   1        SYNCDELAY;                    // 
 144   1        EP8FIFOCFG = 0x0D;            // AUTOIN=1, ZEROLENIN=1, WORDWIDE=1
 145   1        SYNCDELAY;
 146   1      }
 147          
 148          void TD_Poll( void )
 149          { // Called repeatedly while the device is idle
 150   1      
 151   1      }
 152          
 153          BOOL TD_Suspend( void )          
 154          { // Called before the device goes into suspend mode
 155   1         return( TRUE );
 156   1      }
 157          
 158          BOOL TD_Resume( void )          
 159          { // Called after the device resumes
 160   1         return( TRUE );
 161   1      }
 162          
 163          //-----------------------------------------------------------------------------
 164          // Device Request hooks
 165          //   The following hooks are called by the end point 0 device request parser.
 166          //-----------------------------------------------------------------------------
 167          BOOL DR_GetDescriptor( void )
 168          {
 169   1         return( TRUE );
 170   1      }
 171          
 172          BOOL DR_SetConfiguration( void )   
 173          { // Called when a Set Configuration command is received
 174   1        
 175   1        if( EZUSB_HIGHSPEED( ) )
 176   1        { // ...FX2 in high speed mode
 177   2          EP6AUTOINLENH = 0x02;
 178   2          SYNCDELAY;
 179   2          EP8AUTOINLENH = 0x02;   // set core AUTO commit len = 512 bytes
C51 COMPILER V9.59.0.0   SLAVE                                                             12/17/2019 08:47:49 PAGE 4   

 180   2          SYNCDELAY;
 181   2          EP6AUTOINLENL = 0x00;
 182   2          SYNCDELAY;
 183   2          EP8AUTOINLENL = 0x00;
 184   2        }
 185   1        else
 186   1        { // ...FX2 in full speed mode
 187   2          EP6AUTOINLENH = 0x00;
 188   2          SYNCDELAY;
 189   2          EP8AUTOINLENH = 0x00;   // set core AUTO commit len = 64 bytes
 190   2          SYNCDELAY;
 191   2          EP6AUTOINLENL = 0x40;
 192   2          SYNCDELAY;
 193   2          EP8AUTOINLENL = 0x40;
 194   2        }
 195   1            
 196   1        Configuration = SETUPDAT[ 2 ];
 197   1        return( TRUE );        // Handled by user code
 198   1      }
 199          
 200          BOOL DR_GetConfiguration( void )   
 201          { // Called when a Get Configuration command is received
 202   1         EP0BUF[ 0 ] = Configuration;
 203   1         EP0BCH = 0;
 204   1         EP0BCL = 1;
 205   1         return(TRUE);          // Handled by user code
 206   1      }
 207          
 208          BOOL DR_SetInterface( void )       
 209          { // Called when a Set Interface command is received
 210   1         AlternateSetting = SETUPDAT[ 2 ];
 211   1         return( TRUE );        // Handled by user code
 212   1      }
 213          
 214          BOOL DR_GetInterface( void )       
 215          { // Called when a Set Interface command is received
 216   1         EP0BUF[ 0 ] = AlternateSetting;
 217   1         EP0BCH = 0;
 218   1         EP0BCL = 1;
 219   1         return( TRUE );        // Handled by user code
 220   1      }
 221          
 222          BOOL DR_GetStatus( void )
 223          {
 224   1         return( TRUE );
 225   1      }
 226          
 227          BOOL DR_ClearFeature( void )
 228          {
 229   1         return( TRUE );
 230   1      }
 231          
 232          BOOL DR_SetFeature( void )
 233          {
 234   1         return( TRUE );
 235   1      }
 236          
 237          BOOL DR_VendorCmnd( void )
 238          {
 239   1        return( TRUE );
 240   1      }
 241          
C51 COMPILER V9.59.0.0   SLAVE                                                             12/17/2019 08:47:49 PAGE 5   

 242          //-----------------------------------------------------------------------------
 243          // USB Interrupt Handlers
 244          //   The following functions are called by the USB interrupt jump table.
 245          //-----------------------------------------------------------------------------
 246          
 247          // Setup Data Available Interrupt Handler
 248          void ISR_Sudav( void ) interrupt 0
 249          {
 250   1         GotSUD = TRUE;         // Set flag
 251   1         EZUSB_IRQ_CLEAR( );
 252   1         USBIRQ = bmSUDAV;      // Clear SUDAV IRQ
 253   1      }
 254          
 255          // Setup Token Interrupt Handler
 256          void ISR_Sutok( void ) interrupt 0
 257          {
 258   1         EZUSB_IRQ_CLEAR( );
 259   1         USBIRQ = bmSUTOK;      // Clear SUTOK IRQ
 260   1      }
 261          
 262          void ISR_Sof( void ) interrupt 0
 263          {
 264   1         EZUSB_IRQ_CLEAR( );
 265   1         USBIRQ = bmSOF;        // Clear SOF IRQ
 266   1      }
 267          
 268          void ISR_Ures( void ) interrupt 0
 269          {
 270   1         if ( EZUSB_HIGHSPEED( ) )
 271   1         {
 272   2            pConfigDscr = pHighSpeedConfigDscr;
 273   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 274   2         }
 275   1         else
 276   1         {
 277   2            pConfigDscr = pFullSpeedConfigDscr;
 278   2            pOtherConfigDscr = pHighSpeedConfigDscr;
 279   2         }
 280   1         
 281   1         EZUSB_IRQ_CLEAR( );
 282   1         USBIRQ = bmURES;       // Clear URES IRQ
 283   1      }
 284          
 285          void ISR_Susp( void ) interrupt 0
 286          {
 287   1         Sleep = TRUE;
 288   1         EZUSB_IRQ_CLEAR( );
 289   1         USBIRQ = bmSUSP;
 290   1      }
 291          
 292          void ISR_Highspeed( void ) interrupt 0
 293          {
 294   1         if ( EZUSB_HIGHSPEED( ) )
 295   1         {
 296   2            pConfigDscr = pHighSpeedConfigDscr;
 297   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 298   2         }
 299   1         else
 300   1         {
 301   2            pConfigDscr = pFullSpeedConfigDscr;
 302   2            pOtherConfigDscr = pHighSpeedConfigDscr;
 303   2         }
C51 COMPILER V9.59.0.0   SLAVE                                                             12/17/2019 08:47:49 PAGE 6   

 304   1      
 305   1         EZUSB_IRQ_CLEAR( );
 306   1         USBIRQ = bmHSGRANT;
 307   1      }
 308          void ISR_Ep0ack( void ) interrupt 0
 309          {
 310   1      }
 311          void ISR_Stub( void ) interrupt 0
 312          {
 313   1      }
 314          void ISR_Ep0in( void ) interrupt 0
 315          {
 316   1      }
 317          void ISR_Ep0out( void ) interrupt 0
 318          {
 319   1      }
 320          void ISR_Ep1in( void ) interrupt 0
 321          {
 322   1      }
 323          void ISR_Ep1out( void ) interrupt 0
 324          {
 325   1      }
 326          void ISR_Ep2inout( void ) interrupt 0
 327          {
 328   1      }
 329          void ISR_Ep4inout( void ) interrupt 0
 330          {
 331   1      }
 332          void ISR_Ep6inout( void ) interrupt 0
 333          {
 334   1      }
 335          void ISR_Ep8inout( void ) interrupt 0
 336          {
 337   1      }
 338          void ISR_Ibn( void ) interrupt 0
 339          {
 340   1      }
 341          void ISR_Ep0pingnak( void ) interrupt 0
 342          {
 343   1      }
 344          void ISR_Ep1pingnak( void ) interrupt 0
 345          {
 346   1      }
 347          void ISR_Ep2pingnak( void ) interrupt 0
 348          {
 349   1      }
 350          void ISR_Ep4pingnak( void ) interrupt 0
 351          {
 352   1      }
 353          void ISR_Ep6pingnak( void ) interrupt 0
 354          {
 355   1      }
 356          void ISR_Ep8pingnak( void ) interrupt 0
 357          {
 358   1      }
 359          void ISR_Errorlimit( void ) interrupt 0
 360          {
 361   1      }
 362          void ISR_Ep2piderror( void ) interrupt 0
 363          {
 364   1      }
 365          void ISR_Ep4piderror( void ) interrupt 0
C51 COMPILER V9.59.0.0   SLAVE                                                             12/17/2019 08:47:49 PAGE 7   

 366          {
 367   1      }
 368          void ISR_Ep6piderror( void ) interrupt 0
 369          {
 370   1      }
 371          void ISR_Ep8piderror( void ) interrupt 0
 372          {
 373   1      }
 374          void ISR_Ep2pflag( void ) interrupt 0
 375          {
 376   1      }
 377          void ISR_Ep4pflag( void ) interrupt 0
 378          {
 379   1      }
 380          void ISR_Ep6pflag( void ) interrupt 0
 381          {
 382   1      }
 383          void ISR_Ep8pflag( void ) interrupt 0
 384          {
 385   1      }
 386          void ISR_Ep2eflag( void ) interrupt 0
 387          {
 388   1      }
 389          void ISR_Ep4eflag( void ) interrupt 0
 390          {
 391   1      }
 392          void ISR_Ep6eflag( void ) interrupt 0
 393          {
 394   1      }
 395          void ISR_Ep8eflag( void ) interrupt 0
 396          {
 397   1      }
 398          void ISR_Ep2fflag( void ) interrupt 0
 399          {
 400   1      }
 401          void ISR_Ep4fflag( void ) interrupt 0
 402          {
 403   1      }
 404          void ISR_Ep6fflag( void ) interrupt 0
 405          {
 406   1      }
 407          void ISR_Ep8fflag( void ) interrupt 0
 408          {
 409   1      }
 410          void ISR_GpifComplete( void ) interrupt 0
 411          {
 412   1      }
 413          void ISR_GpifWaveform( void ) interrupt 0
 414          {
 415   1      }
 416          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    541    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.59.0.0   SLAVE                                                             12/17/2019 08:47:49 PAGE 8   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
